import { Button, Checkbox, Col, Divider, Form, Input, message, Modal, Row } from "antd"
import { useEffect, useState } from "react"
import { FaRegCircleQuestion } from "react-icons/fa6"
import { useDispatch } from "react-redux"
import { useNavigate } from "react-router-dom"
import { fetchAllChuyenKhoa, handleCreateCauHoi } from "../../../services/apiDoctor"
import './css.css'
const ModalCauHoi = (props) => {

    const {openModalCauHoi, setOpenModalCauHoi} = props
    const dispatch = useDispatch()
    const navigate = useNavigate()
    const [form] = Form.useForm()
    const [loading, setLoading] = useState(false);
    const [dataChuyenKhoa, setDataChuyenKhoa] = useState([])   

    useEffect(() => {
        fetchAllChuyenKhoaDoctor()
    }, [openModalCauHoi])

    const submitCauHoi = async (values) => {
        const {
            lastName, firstName, email, chuyenKhoaId, cauHoi
        } = values

        console.log("lastName, firstName, email, chuyenKhoaId, cauHoi: ",lastName, firstName, email, chuyenKhoaId, cauHoi);
        setLoading(true)
        let res = await handleCreateCauHoi(email, firstName, lastName, chuyenKhoaId, cauHoi)
        if(res && res.data) {
            message.success(res.message)
            cancel()
        }
        setLoading(false)        
    }

    const cancel = () => {
        setOpenModalCauHoi(false)
        form.resetFields()
    }

    const fetchAllChuyenKhoaDoctor = async () => {
        let query = `page=1&limit=1000`
        let res = await fetchAllChuyenKhoa(query)
        if(res && res.data) {
            setDataChuyenKhoa(res.data)
        }
    }

  return (
    <Modal
        title="üìù G·ª≠i c√¢u h·ªèi t·ªõi b√°c sƒ©"
        open={openModalCauHoi}
        onCancel={cancel}
        footer={null}
        width={700}
        style={{ top: 30 }}
        maskClosable={false}
    >
        <Divider />

        <Form
            form={form}
            layout="vertical"
            onFinish={submitCauHoi}
            colon={false}
        >
            <Row gutter={[15, 5]}>
            {/* H·ªç */}
            <Col span={12} xs={24} sm={24} md={12}>
                <Form.Item
                label="H·ªç"
                name="lastName"
                rules={[
                    { required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç c·ªßa b·∫°n' },
                    {
                    pattern: /^[A-Za-z√Ä-·ªπ\s]+$/,
                    message: 'H·ªç kh√¥ng h·ª£p l·ªá (ch·ªâ ch·ªØ)',
                    },
                ]}
                hasFeedback
                >
                <Input placeholder="V√≠ d·ª•: Nguy·ªÖn" />
                </Form.Item>
            </Col>

            {/* T√™n */}
            <Col span={12} xs={24} sm={24} md={12}>
                <Form.Item
                label="T√™n"
                name="firstName"
                rules={[
                    { required: true, message: 'Vui l√≤ng nh·∫≠p t√™n c·ªßa b·∫°n' },
                    {
                    pattern: /^[A-Za-z√Ä-·ªπ\s]+$/,
                    message: 'T√™n kh√¥ng h·ª£p l·ªá (ch·ªâ ch·ªØ)',
                    },
                ]}
                hasFeedback
                >
                <Input placeholder="V√≠ d·ª•: An" />
                </Form.Item>
            </Col>

            {/* Email */}
            <Col span={24}>
                <Form.Item
                label="Email li√™n h·ªá"
                name="email"
                rules={[
                    { required: true, message: 'Vui l√≤ng nh·∫≠p email c·ªßa b·∫°n' },
                    { type: 'email', message: 'Email kh√¥ng h·ª£p l·ªá' },
                ]}
                hasFeedback
                >
                <Input placeholder="example@gmail.com" />
                </Form.Item>
            </Col>

            {/* Chuy√™n khoa */}
            <Col span={24}>
                <Form.Item
                label="Chuy√™n khoa b·∫°n c·∫ßn t∆∞ v·∫•n"
                name="chuyenKhoaId"
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn chuy√™n khoa' }]}
                >
                <Checkbox.Group style={{ display: 'flex', flexWrap: 'wrap', gap: 12 }}>
                    {dataChuyenKhoa.map((item) => (
                    <Checkbox key={item._id} value={item._id}>
                        {item.name}
                    </Checkbox>
                    ))}
                </Checkbox.Group>
                </Form.Item>
            </Col>

            {/* C√¢u h·ªèi */}
            <Col span={24}>
                <Form.Item
                label="N·ªôi dung c√¢u h·ªèi"
                name="cauHoi"
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p c√¢u h·ªèi' }]}
                >
                <Input.TextArea
                    rows={4}
                    placeholder="V√≠ d·ª•: T√¥i th∆∞·ªùng xuy√™n ƒëau b·ª•ng sau khi ƒÉn, c√≥ ph·∫£i l√† d·∫•u hi·ªáu c·ªßa vi√™m lo√©t d·∫° d√†y kh√¥ng?"
                />
                </Form.Item>
            </Col>

            {/* N√∫t g·ª≠i */}
            <Col span={24} style={{ textAlign: 'center', marginTop: 8 }}>
                <Button
                className="btn-taocauhoi"
                onClick={() => form.submit()}
                type="primary"
                size="large"
                loading={loading}
                icon={<FaRegCircleQuestion size={20} />}
                >
                G·ª≠i c√¢u h·ªèi
                </Button>
            </Col>
            </Row>
        </Form>
    </Modal>
  )
}
export default ModalCauHoi