import React, { useRef, useState } from "react";
import { Button, Input, Card, Typography, Divider, Row, Col } from "antd";
import { SendOutlined, MessageOutlined, CheckCircleFilled } from "@ant-design/icons";
import Fuse from "fuse.js";
import "./ChatBot.css";

const { Text, Title } = Typography;

const faq = [
  { question: "Li√™n h·ªá cho admin qua ƒë√¢u ƒë·ªÉ thi·∫øt k·∫ø website?", answer: "B·∫°n vui l√≤ng li√™n h·ªá Zalo: 0972138493 nh√©" },
  { question: "Gi·ªù m·ªü c·ª≠a?", answer: "Ch√∫ng t√¥i m·ªü c·ª≠a t·ª´ 8h00 ƒë·∫øn 20h00 m·ªói ng√†y." },
  { question: "ƒê·ªãa ch·ªâ ·ªü ƒë√¢u?", answer: "ƒê·ªãa ch·ªâ: Nam T·ª´ Li√™m, H√† N·ªôi" },
  { question: "C√≥ b√°c sƒ© chuy√™n khoa kh√¥ng?", answer: "D·∫° c√≥, b√™n em c√≥ ƒë·∫ßy ƒë·ªß c√°c chuy√™n khoa t·ª´ n·ªôi, ngo·∫°i, nhi, da li·ªÖu..." },
  { question: "ƒê·∫∑t l·ªãch kh√°m nh∆∞ th·∫ø n√†o?", answer: "B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·ªãch qua trang ƒê·∫∑t Kh√°m ho·∫∑c g·ªçi hotline 1900 1234." },
  { question: "C√≥ kh√°m ngo√†i gi·ªù kh√¥ng?", answer: "D·∫° c√≥. Ch√∫ng t√¥i ph·ª•c v·ª• ngo√†i gi·ªù ƒë·∫øn 20h00 h·∫±ng ng√†y, k·ªÉ c·∫£ cu·ªëi tu·∫ßn." },
  { question: "C√≥ l√†m vi·ªác cu·ªëi tu·∫ßn kh√¥ng?", answer: "D·∫° c√≥, ch√∫ng t√¥i m·ªü c·ª≠a c·∫£ th·ª© 7 v√† Ch·ªß nh·∫≠t." },
  { question: "Kh√°m c√≥ c·∫ßn ƒë·∫∑t tr∆∞·ªõc kh√¥ng?", answer: "B·∫°n n√™n ƒë·∫∑t tr∆∞·ªõc ƒë·ªÉ gi·ªØ ch·ªó v√† gi·∫£m th·ªùi gian ch·ªù ƒë·ª£i." },
  { question: "Th·ªùi gian kh√°m m·∫•t bao l√¢u?", answer: "Th√¥ng th∆∞·ªùng 15‚Äì30 ph√∫t, t√πy theo t√¨nh tr·∫°ng c·ª• th·ªÉ c·ªßa b·∫°n." },
  { question: "Chi ph√≠ kh√°m bao nhi√™u?", answer: "Chi ph√≠ kh√°m t·ª´ 200.000ƒë ‚Äì 500.000ƒë t√πy chuy√™n khoa." },
  { question: "C√≥ thanh to√°n b·∫£o hi·ªÉm y t·∫ø kh√¥ng?", answer: "Hi·ªán t·∫°i ch√∫ng t√¥i ch∆∞a h·ªó tr·ª£ BHYT, nh∆∞ng c√≥ nhi·ªÅu g√≥i ∆∞u ƒë√£i kh√°m t·ªïng qu√°t." },
  { question: "C√≥ d·ªãch v·ª• l·∫•y m·∫´u t·∫°i nh√† kh√¥ng?", answer: "D·∫° c√≥, b·∫°n c√≥ th·ªÉ ƒë·∫∑t d·ªãch v·ª• l·∫•y m·∫´u x√©t nghi·ªám t·∫°i nh√† qua hotline." },
  { question: "C√≥ ti√™m ng·ª´a kh√¥ng?", answer: "Hi·ªán t·∫°i c√≥ d·ªãch v·ª• ti√™m ch·ªßng theo y√™u c·∫ßu, b·∫°n n√™n g·ªçi tr∆∞·ªõc ƒë·ªÉ ƒë·∫∑t l·ªãch." },
  { question: "L·∫•y k·∫øt qu·∫£ ·ªü ƒë√¢u?", answer: "B·∫°n c√≥ th·ªÉ xem k·∫øt qu·∫£ kh√°m v√† x√©t nghi·ªám qua ·ª©ng d·ª•ng ho·∫∑c ƒë·∫øn ph√≤ng kh√°m." },
  { question: "C√≥ h·ªó tr·ª£ t∆∞ v·∫•n online kh√¥ng?", answer: "D·∫° c√≥, b·∫°n c√≥ th·ªÉ ƒë·∫∑t l·ªãch t∆∞ v·∫•n tr·ª±c tuy·∫øn v·ªõi b√°c sƒ© qua website ho·∫∑c app." },
  { question: "C√≥ b√£i gi·ªØ xe kh√¥ng?", answer: "C√≥ ·∫°, ph√≤ng kh√°m c√≥ b√£i gi·ªØ xe m√°y v√† √¥ t√¥ mi·ªÖn ph√≠." }
];

const fuse = new Fuse(faq, {
  keys: ["question"],
  threshold: 0.4,
});

const ChatBot = () => {
  const [open, setOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const bottomRef = useRef(null);

  const handleSend = (text = input) => {
    if (!text.trim()) return;

    const lowerInput = text.toLowerCase();
    const result = fuse.search(lowerInput);

    const botReply = result.length
      ? result[0].item.answer
      : "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu c√¢u h·ªèi n√†y. B·∫°n vui l√≤ng h·ªèi l·∫°i? (H·ªèi k√®m theo c√°c t·ª´ kh√≥a nh∆∞ b√™n d∆∞·ªõi ƒë·ªÉ t√¥i d·ªÖ tr·∫£ l·ªùi h∆°n nha)";

    setMessages((prev) => [
      ...prev,
      { from: "user", text },
      { from: "bot", text: botReply },
    ]);
    setInput("");

    setTimeout(() => {
      bottomRef.current?.scrollIntoView({ behavior: "smooth" });
    }, 100);
  };

  const handleFaqClick = (question) => {
    handleSend(question);
  };

  return (
    <div className="chatbot-container">
      {open && (
        <Row justify="end">
          <Col xs={24} sm={22} md={18} lg={16} xl={14}>
            <Card
                className="chatbot-box"
                title={<Title level={5} style={{ margin: 0 }}>ü§ñ H·ªéI ƒê√ÅP C√ôNG AI <CheckCircleFilled style={{ color: "#1877F2", fontSize: 16 }} /></Title>}
                extra={<Button onClick={() => setOpen(false)}>ƒê√≥ng</Button>}
                bodyStyle={{ padding: 0 }}
                style={{ width: "100%", maxWidth: 800 }}
                >
                <div className="chatbot-content-scrollable">
                    <div className="chatbot-messages">
                    {messages.map((msg, i) => (
                        <div key={i} className={`msg ${msg.from}`}>
                        <Text>{msg.text}</Text>
                        </div>
                    ))}
                    <div ref={bottomRef} />
                    </div>

                    <Divider style={{ margin: "8px 16px" }}>‚ùì C√°c c√¢u h·ªèi ph·ªï bi·∫øn</Divider>

                    <div className="chatbot-faq-bubbles">
                    {faq.map((item, idx) => (
                        <div key={idx} className="faq-bubble" onClick={() => handleFaqClick(item.question)}>
                        {item.question}
                        </div>
                    ))}
                    </div>
                </div>

                <div className="chatbot-footer">
                    <Row gutter={8}>
                    <Col span={20}>
                        <Input
                        value={input}
                        onChange={(e) => setInput(e.target.value)}
                        placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                        onPressEnter={() => handleSend()}
                        />
                    </Col>
                    <Col span={4}>
                        <Button
                        type="primary"
                        icon={<SendOutlined style={{color:"blue"}} />}
                        onClick={() => handleSend()}
                        style={{ width: "100%", height: "100%", backgroundColor:"transparent" }}
                        />
                    </Col>
                    </Row>
                </div>
            </Card>
          </Col>
        </Row>
      )}

      {!open && (
        <Button
          type="primary"
          shape="circle"
          size="large"          
          icon={<MessageOutlined />}
          className="chatbot-toggle"
          onClick={() => setOpen(true)}
        />
      )}
    </div>
  );
};

export default ChatBot;
